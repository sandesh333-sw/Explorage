name: Explorage CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: explorage-cluster
  GKE_ZONE: us-central1-a
  NAMESPACE: explorage
  DEPLOYMENT_NAME: explorage-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test --if-present
        env:
          CI: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: pulami/explorage:latest,pulami/explorage:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '426.0.0'

      - name: Authenticate to GCP
        env:
          GKE_SA_KEY_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          if [ -z "$GKE_SA_KEY_JSON" ]; then
            echo "GKE_SA_KEY secret is empty or not set" >&2
            exit 1
          fi
          # Write the JSON key safely preserving newlines
          echo "$GKE_SA_KEY_JSON" | tr -d '\r' > gke-key.json
          # Basic validation: ensure file contains a JSON key structure
          if ! grep -q '"private_key_id"' gke-key.json; then
            echo "Invalid service account JSON written to gke-key.json" >&2
            head -n 5 gke-key.json >&2 || true
            exit 1
          fi
          gcloud auth activate-service-account --key-file=gke-key.json
          gcloud config set project ${{ env.PROJECT_ID }}

      - name: Install GKE Auth Plugin
        run: |
          # Add Google Cloud SDK APT repo
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          # Import the Google Cloud public key
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          # Update and install plugin
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Create namespace if needed
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Kubernetes secrets
        run: |
          kubectl create secret generic explorage-secrets \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=CLOUD_NAME=${{ secrets.CLOUD_NAME }} \
            --from-literal=CLOUD_API_KEY=${{ secrets.CLOUD_API_KEY }} \
            --from-literal=CLOUD_API_SECRET=${{ secrets.CLOUD_API_SECRET }} \
            --from-literal=MAP_TOKEN=${{ secrets.MAP_TOKEN }} \
            --from-literal=ATLASDB_URL=${{ secrets.ATLASDB_URL }} \
            --from-literal=SECRET=${{ secrets.SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to GKE
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} backend=pulami/explorage:${{ github.sha }} -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}
          echo "âœ… Deployment successful! Your app is live."
